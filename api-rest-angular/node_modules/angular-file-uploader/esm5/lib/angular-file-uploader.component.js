import { __assign, __decorate, __values } from "tslib";
import { Component, EventEmitter, Input, Output, } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams, HttpEventType, } from '@angular/common/http';
var AngularFileUploaderComponent = /** @class */ (function () {
    function AngularFileUploaderComponent(http) {
        this.http = http;
        this.resetUpload = false;
        // Outputs
        this.ApiResponse = new EventEmitter();
        this.everythingDone = new EventEmitter();
        this.allowedFiles = [];
        this.notAllowedFiles = [];
        this.Caption = [];
        this.isAllowedFileSingle = true;
        this.progressBarShow = false;
        this.enableUploadBtn = false;
        this.uploadMsg = false;
        this.afterUpload = false;
        this.uploadStarted = false;
        this.currentUploads = [];
        this.fileNameIndex = true;
        this.idDate = +new Date();
    }
    AngularFileUploaderComponent.prototype.ngOnChanges = function (changes) {
        // Track changes in Configuration and see if user has even provided Configuration.
        if (changes.config && this.config) {
            // Assign User Configurations to Library Properties.
            this.theme = this.config.theme || '';
            this.id =
                this.config.id ||
                    parseInt((this.idDate / 10000).toString().split('.')[1], 10) +
                        Math.floor(Math.random() * 20) * 10000;
            this.hideProgressBar = this.config.hideProgressBar || false;
            this.hideResetBtn = this.config.hideResetBtn || false;
            this.hideSelectBtn = this.config.hideSelectBtn || false;
            this.maxSize = (this.config.maxSize || 20) * 1024000; // mb to bytes.
            this.uploadAPI = this.config.uploadAPI.url;
            this.method = this.config.uploadAPI.method || 'POST';
            this.formatsAllowed =
                this.config.formatsAllowed || '.jpg,.png,.pdf,.docx,.txt,.gif,.jpeg';
            this.multiple = this.config.multiple || false;
            this.headers = this.config.uploadAPI.headers || {};
            this.params = this.config.uploadAPI.params || {};
            this.responseType = this.config.uploadAPI.responseType || null;
            this.fileNameIndex = this.config.fileNameIndex === false ? false : true;
            this.replaceTexts = {
                selectFileBtn: this.multiple ? 'Select Files' : 'Select File',
                resetBtn: 'Reset',
                uploadBtn: 'Upload',
                dragNDropBox: 'Drag N Drop',
                attachPinBtn: this.multiple ? 'Attach Files...' : 'Attach File...',
                afterUploadMsg_success: 'Successfully Uploaded !',
                afterUploadMsg_error: 'Upload Failed !',
                sizeLimit: 'Size Limit',
            }; // default replaceText.
            if (this.config.replaceTexts) {
                // updated replaceText if user has provided any.
                this.replaceTexts = __assign(__assign({}, this.replaceTexts), this.config.replaceTexts);
            }
        }
        // Reset when resetUpload value changes from false to true.
        if (changes.resetUpload) {
            if (changes.resetUpload.currentValue === true) {
                this.resetFileUpload();
            }
        }
    };
    // Reset following properties.
    AngularFileUploaderComponent.prototype.resetFileUpload = function () {
        this.allowedFiles = [];
        this.Caption = [];
        this.notAllowedFiles = [];
        this.uploadMsg = false;
        this.enableUploadBtn = false;
    };
    // When user selects files.
    AngularFileUploaderComponent.prototype.onChange = function (event) {
        this.notAllowedFiles = [];
        var fileExtRegExp = /(?:\.([^.]+))?$/;
        var fileList;
        if (this.afterUpload || !this.multiple) {
            this.allowedFiles = [];
            this.Caption = [];
            this.afterUpload = false;
        }
        if (event.type === 'drop') {
            fileList = event.dataTransfer.files;
        }
        else {
            fileList = event.target.files || event.srcElement.files;
        }
        // 'forEach' does not exist on 'filelist' that's why this good old 'for' is used.
        for (var i = 0; i < fileList.length; i++) {
            var currentFileExt = fileExtRegExp
                .exec(fileList[i].name)[1]
                .toLowerCase(); // Get file extension.
            var isFormatValid = this.formatsAllowed.includes(currentFileExt);
            var isSizeValid = fileList[i].size <= this.maxSize;
            // Check whether current file format and size is correct as specified in the configurations.
            if (isFormatValid && isSizeValid) {
                this.allowedFiles.push(fileList[i]);
            }
            else {
                this.notAllowedFiles.push({
                    fileName: fileList[i].name,
                    fileSize: this.convertSize(fileList[i].size),
                    errorMsg: !isFormatValid ? 'Invalid format' : 'Invalid size',
                });
            }
        }
        // If there's any allowedFiles.
        if (this.allowedFiles.length > 0) {
            this.enableUploadBtn = true;
            // Upload the files directly if theme is attach pin (as upload btn is not there for this theme).
            if (this.theme === 'attachPin') {
                this.uploadFiles();
            }
        }
        else {
            this.enableUploadBtn = false;
        }
        this.uploadMsg = false;
        this.uploadStarted = false;
        this.uploadPercent = 0;
        event.target.value = null;
    };
    AngularFileUploaderComponent.prototype.uploadFiles = function () {
        var e_1, _a, e_2, _b;
        var _this = this;
        this.progressBarShow = true;
        this.uploadStarted = true;
        this.notAllowedFiles = [];
        var isError = false;
        this.isAllowedFileSingle = this.allowedFiles.length <= 1;
        var formData = new FormData();
        // Add data to be sent in this request
        this.allowedFiles.forEach(function (file, i) {
            formData.append(_this.Caption[i] || 'file' + (_this.fileNameIndex ? i : ''), _this.allowedFiles[i]);
        });
        // Contruct Headers
        var headers = new HttpHeaders();
        try {
            for (var _c = __values(Object.keys(this.headers)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var key = _d.value;
                headers.append(key, this.headers[key]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // Contruct Params
        var params = new HttpParams();
        try {
            for (var _e = __values(Object.keys(this.params)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var key = _f.value;
                params.append(key, this.params[key]);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var options = {
            headers: headers,
            params: params,
        };
        if (this.responseType)
            options.responseType = this.responseType;
        this.http
            .request(this.method.toUpperCase(), this.uploadAPI, __assign({ body: formData, reportProgress: true, observe: 'events' }, options))
            .subscribe(function (event) {
            // Upload Progress
            if (event.type === HttpEventType.UploadProgress) {
                _this.enableUploadBtn = false; // button should be disabled if process uploading
                var currentDone = event.loaded / event.total;
                _this.uploadPercent = Math.round((event.loaded / event.total) * 100);
            }
            else if (event.type === HttpEventType.Response) {
                if (event.status === 200 || event.status === 201) {
                    // Success
                    _this.progressBarShow = false;
                    _this.enableUploadBtn = false;
                    _this.uploadMsg = true;
                    _this.afterUpload = true;
                    if (!isError) {
                        _this.uploadMsgText = _this.replaceTexts.afterUploadMsg_success;
                        _this.uploadMsgClass = 'text-success lead';
                    }
                }
                else {
                    // Failure
                    isError = true;
                    _this.handleErrors();
                }
                _this.ApiResponse.emit(event);
            }
            else {
                //console.log('Event Other: ', event);
            }
        }, function (error) {
            // Failure
            isError = true;
            _this.handleErrors();
            _this.ApiResponse.emit(error);
        });
    };
    AngularFileUploaderComponent.prototype.handleErrors = function () {
        this.progressBarShow = false;
        this.enableUploadBtn = false;
        this.uploadMsg = true;
        this.afterUpload = true;
        this.uploadMsgText = this.replaceTexts.afterUploadMsg_error;
        this.uploadMsgClass = 'text-danger lead';
    };
    AngularFileUploaderComponent.prototype.removeFile = function (i, sf_na) {
        if (sf_na === 'sf') {
            this.allowedFiles.splice(i, 1);
            this.Caption.splice(i, 1);
        }
        else {
            this.notAllowedFiles.splice(i, 1);
        }
        if (this.allowedFiles.length === 0) {
            this.enableUploadBtn = false;
        }
    };
    AngularFileUploaderComponent.prototype.convertSize = function (fileSize) {
        return fileSize < 1024000
            ? (fileSize / 1024).toFixed(2) + ' KB'
            : (fileSize / 1024000).toFixed(2) + ' MB';
    };
    AngularFileUploaderComponent.prototype.attachpinOnclick = function () {
        var element = document.getElementById('sel' + this.id);
        if (element !== null) {
            element.click();
        }
    };
    AngularFileUploaderComponent.prototype.drop = function (event) {
        event.stopPropagation();
        event.preventDefault();
        this.onChange(event);
    };
    AngularFileUploaderComponent.prototype.allowDrop = function (event) {
        event.stopPropagation();
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
    };
    AngularFileUploaderComponent.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    __decorate([
        Input()
    ], AngularFileUploaderComponent.prototype, "config", void 0);
    __decorate([
        Input()
    ], AngularFileUploaderComponent.prototype, "resetUpload", void 0);
    __decorate([
        Output()
    ], AngularFileUploaderComponent.prototype, "ApiResponse", void 0);
    __decorate([
        Output()
    ], AngularFileUploaderComponent.prototype, "everythingDone", void 0);
    AngularFileUploaderComponent = __decorate([
        Component({
            selector: 'angular-file-uploader',
            template: "<div class=\"container\" *ngIf=\"(theme !== 'attachPin')\" id=\"default\">\n\n  <!-- Drag n Drop theme Starts -->\n  <div *ngIf=\"theme == 'dragNDrop'\" id=\"dragNDrop\"\n    [ngClass]=\"(hideSelectBtn && hideResetBtn) ? null : 'dragNDropBtmPad'\" class=\"dragNDrop\">\n    <div style=\"position:relative;\">\n      <div id=\"div1\" class=\"div1 afu-dragndrop-box\" (drop)=\"drop($event)\" (dragover)=\"allowDrop($event)\">\n        <p class=\"afu-dragndrop-text\">{{replaceTexts?.dragNDropBox}}</p>\n      </div>\n      <!-- <span class='label label-info' id=\"upload-file-info{{id}}\">{{allowedFiles[0]?.name}}</span> -->\n    </div>\n  </div>\n  <!-- Drag n Drop theme Ends -->\n\n  <label for=\"sel{{id}}\" class=\"btn btn-primary btn-sm afu-select-btn\"\n    *ngIf=\"!hideSelectBtn\">{{replaceTexts?.selectFileBtn}}</label>\n  <input type=\"file\" id=\"sel{{id}}\" style=\"display: none\" *ngIf=\"!hideSelectBtn\" (change)=\"onChange($event)\"\n    title=\"Select file\" name=\"files[]\" [accept]=formatsAllowed [attr.multiple]=\"multiple ? '' : null\" />\n  <button class=\"btn btn-info btn-sm resetBtn afu-reset-btn\" (click)=\"resetFileUpload()\"\n    *ngIf=\"!hideResetBtn\">{{replaceTexts?.resetBtn}}</button>\n  <br *ngIf=\"!hideSelectBtn\">\n  <p class=\"constraints-info afu-constraints-info\">({{formatsAllowed}}) {{replaceTexts?.sizeLimit}}: {{(convertSize(maxSize))}}\n  </p>\n  <!--Allowed file list-->\n  <div class=\"row afu-valid-file\" *ngFor=\"let sf of allowedFiles;let i=index\">\n    <p class=\"col-xs-3 textOverflow\"><span class=\"text-primary\">{{sf.name}}</span></p>\n    <p class=\"col-xs-3 padMarg sizeC\"><strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n    <!--  <input class=\"col-xs-3 progress caption\"  type=\"text\"  placeholder=\"Caption..\"  [(ngModel)]=\"Caption[i]\"  *ngIf=\"!uploadStarted\"/> -->\n    <div class=\"progress col-xs-3 padMarg afu-progress-bar\" *ngIf=\"isAllowedFileSingle && progressBarShow && !hideProgressBar\">\n      <span class=\"progress-bar progress-bar-success\" role=\"progressbar\"\n        [ngStyle]=\"{'width':uploadPercent+'%'}\">{{uploadPercent}}%</span>\n    </div>\n    <a class=\"col-xs-1\" role=\"button\" (click)=\"removeFile(i,'sf')\" *ngIf=\"!uploadStarted\"><i class=\"fa fa-times\"></i></a>\n  </div>\n  <!--Not Allowed file list-->\n  <div class=\"row text-danger afu-invalid-file\" *ngFor=\"let na of notAllowedFiles;let j=index\">\n    <p class=\"col-xs-3 textOverflow\"><span>{{na['fileName']}}</span></p>\n    <p class=\"col-xs-3 padMarg sizeC\"><strong>({{na['fileSize']}})</strong></p>\n    <p class=\"col-xs-3 \">{{na['errorMsg']}}</p>\n    <a class=\"col-xs-1 delFileIcon\" role=\"button\" (click)=\"removeFile(j,'na')\" *ngIf=\"!uploadStarted\">&nbsp;<i\n        class=\"fa fa-times\"></i></a>\n  </div>\n\n  <p *ngIf=\"uploadMsg\" class=\"{{uploadMsgClass}} + afu-upload-status\">{{uploadMsgText}}<p>\n      <div *ngIf=\"!isAllowedFileSingle && progressBarShow && !hideProgressBar\">\n        <div class=\"progress col-xs-4 padMarg afu-progress-bar\">\n          <span class=\"progress-bar progress-bar-success\" role=\"progressbar\"\n            [ngStyle]=\"{'width':uploadPercent+'%'}\">{{uploadPercent}}%</span>\n        </div>\n        <br>\n        <br>\n      </div>\n      <button class=\"btn btn-success afu-upload-btn\" type=\"button\" (click)=\"uploadFiles()\"\n        [disabled]=!enableUploadBtn>{{replaceTexts?.uploadBtn}}</button>\n      <br>\n</div>\n\n<!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////-->\n<div *ngIf=\"theme == 'attachPin'\" id=\"attachPin\">\n  <div style=\"position:relative;padding-left:6px\">\n    <a class='btn up_btn afu-attach-pin' (click)=\"attachpinOnclick()\">\n      {{replaceTexts?.attachPinBtn}}\n      <i class=\"fa fa-paperclip\" aria-hidden=\"true\"></i>\n      <!-- <p style=\"margin-top:10px\">({{formatsAllowed}}) Size limit- {{(convertSize(maxSize))}}</p> -->\n      <input type=\"file\" id=\"sel{{id}}\" (change)=\"onChange($event)\" style=\"display: none\" title=\"Select file\"\n        name=\"files[]\" [accept]=formatsAllowed [attr.multiple]=\"multiple ? '' : null\" />\n      <br>\n    </a>\n    &nbsp;\n    <span class='label label-info' id=\"upload-file-info{{id}}\">{{allowedFiles[0]?.name}}</span>\n  </div>\n</div>\n\n",
            styles: [".constraints-info{margin-top:10px;font-style:italic}.padMarg{padding:0;margin-bottom:0}.caption{margin-right:5px}.textOverflow{white-space:nowrap;padding-right:0;overflow:hidden;text-overflow:ellipsis}.up_btn{color:#000;background-color:transparent;border:2px solid #5c5b5b;border-radius:22px}.delFileIcon{text-decoration:none;color:#ce0909}.dragNDrop .div1{display:border-box;border:2px dashed #5c5b5b;height:6rem;width:20rem}.dragNDrop .div1>p{text-align:center;font-weight:700;color:#5c5b5b;margin-top:1.4em}.dragNDropBtmPad{padding-bottom:2rem}@media screen and (max-width:620px){.caption{padding:0}}@media screen and (max-width:510px){.sizeC{width:25%}}@media screen and (max-width:260px){.caption,.sizeC{font-size:10px}}.resetBtn{margin-left:3px}"]
        })
    ], AngularFileUploaderComponent);
    return AngularFileUploaderComponent;
}());
export { AngularFileUploaderComponent };
//# sourceMappingURL=data:application/json;base64,