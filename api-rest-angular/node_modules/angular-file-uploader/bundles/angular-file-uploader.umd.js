(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-file-uploader', ['exports', '@angular/core', '@angular/common/http', '@angular/common'], factory) :
    (global = global || self, factory(global['angular-file-uploader'] = {}, global.ng.core, global.ng.common.http, global.ng.common));
}(this, (function (exports, core, http, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var AngularFileUploaderService = /** @class */ (function () {
        function AngularFileUploaderService() {
        }
        AngularFileUploaderService.ɵprov = core.ɵɵdefineInjectable({ factory: function AngularFileUploaderService_Factory() { return new AngularFileUploaderService(); }, token: AngularFileUploaderService, providedIn: "root" });
        AngularFileUploaderService = __decorate([
            core.Injectable({
                providedIn: 'root'
            })
        ], AngularFileUploaderService);
        return AngularFileUploaderService;
    }());

    var AngularFileUploaderComponent = /** @class */ (function () {
        function AngularFileUploaderComponent(http) {
            this.http = http;
            this.resetUpload = false;
            // Outputs
            this.ApiResponse = new core.EventEmitter();
            this.everythingDone = new core.EventEmitter();
            this.allowedFiles = [];
            this.notAllowedFiles = [];
            this.Caption = [];
            this.isAllowedFileSingle = true;
            this.progressBarShow = false;
            this.enableUploadBtn = false;
            this.uploadMsg = false;
            this.afterUpload = false;
            this.uploadStarted = false;
            this.currentUploads = [];
            this.fileNameIndex = true;
            this.idDate = +new Date();
        }
        AngularFileUploaderComponent.prototype.ngOnChanges = function (changes) {
            // Track changes in Configuration and see if user has even provided Configuration.
            if (changes.config && this.config) {
                // Assign User Configurations to Library Properties.
                this.theme = this.config.theme || '';
                this.id =
                    this.config.id ||
                        parseInt((this.idDate / 10000).toString().split('.')[1], 10) +
                            Math.floor(Math.random() * 20) * 10000;
                this.hideProgressBar = this.config.hideProgressBar || false;
                this.hideResetBtn = this.config.hideResetBtn || false;
                this.hideSelectBtn = this.config.hideSelectBtn || false;
                this.maxSize = (this.config.maxSize || 20) * 1024000; // mb to bytes.
                this.uploadAPI = this.config.uploadAPI.url;
                this.method = this.config.uploadAPI.method || 'POST';
                this.formatsAllowed =
                    this.config.formatsAllowed || '.jpg,.png,.pdf,.docx,.txt,.gif,.jpeg';
                this.multiple = this.config.multiple || false;
                this.headers = this.config.uploadAPI.headers || {};
                this.params = this.config.uploadAPI.params || {};
                this.responseType = this.config.uploadAPI.responseType || null;
                this.fileNameIndex = this.config.fileNameIndex === false ? false : true;
                this.replaceTexts = {
                    selectFileBtn: this.multiple ? 'Select Files' : 'Select File',
                    resetBtn: 'Reset',
                    uploadBtn: 'Upload',
                    dragNDropBox: 'Drag N Drop',
                    attachPinBtn: this.multiple ? 'Attach Files...' : 'Attach File...',
                    afterUploadMsg_success: 'Successfully Uploaded !',
                    afterUploadMsg_error: 'Upload Failed !',
                    sizeLimit: 'Size Limit',
                }; // default replaceText.
                if (this.config.replaceTexts) {
                    // updated replaceText if user has provided any.
                    this.replaceTexts = __assign(__assign({}, this.replaceTexts), this.config.replaceTexts);
                }
            }
            // Reset when resetUpload value changes from false to true.
            if (changes.resetUpload) {
                if (changes.resetUpload.currentValue === true) {
                    this.resetFileUpload();
                }
            }
        };
        // Reset following properties.
        AngularFileUploaderComponent.prototype.resetFileUpload = function () {
            this.allowedFiles = [];
            this.Caption = [];
            this.notAllowedFiles = [];
            this.uploadMsg = false;
            this.enableUploadBtn = false;
        };
        // When user selects files.
        AngularFileUploaderComponent.prototype.onChange = function (event) {
            this.notAllowedFiles = [];
            var fileExtRegExp = /(?:\.([^.]+))?$/;
            var fileList;
            if (this.afterUpload || !this.multiple) {
                this.allowedFiles = [];
                this.Caption = [];
                this.afterUpload = false;
            }
            if (event.type === 'drop') {
                fileList = event.dataTransfer.files;
            }
            else {
                fileList = event.target.files || event.srcElement.files;
            }
            // 'forEach' does not exist on 'filelist' that's why this good old 'for' is used.
            for (var i = 0; i < fileList.length; i++) {
                var currentFileExt = fileExtRegExp
                    .exec(fileList[i].name)[1]
                    .toLowerCase(); // Get file extension.
                var isFormatValid = this.formatsAllowed.includes(currentFileExt);
                var isSizeValid = fileList[i].size <= this.maxSize;
                // Check whether current file format and size is correct as specified in the configurations.
                if (isFormatValid && isSizeValid) {
                    this.allowedFiles.push(fileList[i]);
                }
                else {
                    this.notAllowedFiles.push({
                        fileName: fileList[i].name,
                        fileSize: this.convertSize(fileList[i].size),
                        errorMsg: !isFormatValid ? 'Invalid format' : 'Invalid size',
                    });
                }
            }
            // If there's any allowedFiles.
            if (this.allowedFiles.length > 0) {
                this.enableUploadBtn = true;
                // Upload the files directly if theme is attach pin (as upload btn is not there for this theme).
                if (this.theme === 'attachPin') {
                    this.uploadFiles();
                }
            }
            else {
                this.enableUploadBtn = false;
            }
            this.uploadMsg = false;
            this.uploadStarted = false;
            this.uploadPercent = 0;
            event.target.value = null;
        };
        AngularFileUploaderComponent.prototype.uploadFiles = function () {
            var e_1, _a, e_2, _b;
            var _this = this;
            this.progressBarShow = true;
            this.uploadStarted = true;
            this.notAllowedFiles = [];
            var isError = false;
            this.isAllowedFileSingle = this.allowedFiles.length <= 1;
            var formData = new FormData();
            // Add data to be sent in this request
            this.allowedFiles.forEach(function (file, i) {
                formData.append(_this.Caption[i] || 'file' + (_this.fileNameIndex ? i : ''), _this.allowedFiles[i]);
            });
            // Contruct Headers
            var headers = new http.HttpHeaders();
            try {
                for (var _c = __values(Object.keys(this.headers)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var key = _d.value;
                    headers.append(key, this.headers[key]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            // Contruct Params
            var params = new http.HttpParams();
            try {
                for (var _e = __values(Object.keys(this.params)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var key = _f.value;
                    params.append(key, this.params[key]);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var options = {
                headers: headers,
                params: params,
            };
            if (this.responseType)
                options.responseType = this.responseType;
            this.http
                .request(this.method.toUpperCase(), this.uploadAPI, __assign({ body: formData, reportProgress: true, observe: 'events' }, options))
                .subscribe(function (event) {
                // Upload Progress
                if (event.type === http.HttpEventType.UploadProgress) {
                    _this.enableUploadBtn = false; // button should be disabled if process uploading
                    var currentDone = event.loaded / event.total;
                    _this.uploadPercent = Math.round((event.loaded / event.total) * 100);
                }
                else if (event.type === http.HttpEventType.Response) {
                    if (event.status === 200 || event.status === 201) {
                        // Success
                        _this.progressBarShow = false;
                        _this.enableUploadBtn = false;
                        _this.uploadMsg = true;
                        _this.afterUpload = true;
                        if (!isError) {
                            _this.uploadMsgText = _this.replaceTexts.afterUploadMsg_success;
                            _this.uploadMsgClass = 'text-success lead';
                        }
                    }
                    else {
                        // Failure
                        isError = true;
                        _this.handleErrors();
                    }
                    _this.ApiResponse.emit(event);
                }
                else {
                    //console.log('Event Other: ', event);
                }
            }, function (error) {
                // Failure
                isError = true;
                _this.handleErrors();
                _this.ApiResponse.emit(error);
            });
        };
        AngularFileUploaderComponent.prototype.handleErrors = function () {
            this.progressBarShow = false;
            this.enableUploadBtn = false;
            this.uploadMsg = true;
            this.afterUpload = true;
            this.uploadMsgText = this.replaceTexts.afterUploadMsg_error;
            this.uploadMsgClass = 'text-danger lead';
        };
        AngularFileUploaderComponent.prototype.removeFile = function (i, sf_na) {
            if (sf_na === 'sf') {
                this.allowedFiles.splice(i, 1);
                this.Caption.splice(i, 1);
            }
            else {
                this.notAllowedFiles.splice(i, 1);
            }
            if (this.allowedFiles.length === 0) {
                this.enableUploadBtn = false;
            }
        };
        AngularFileUploaderComponent.prototype.convertSize = function (fileSize) {
            return fileSize < 1024000
                ? (fileSize / 1024).toFixed(2) + ' KB'
                : (fileSize / 1024000).toFixed(2) + ' MB';
        };
        AngularFileUploaderComponent.prototype.attachpinOnclick = function () {
            var element = document.getElementById('sel' + this.id);
            if (element !== null) {
                element.click();
            }
        };
        AngularFileUploaderComponent.prototype.drop = function (event) {
            event.stopPropagation();
            event.preventDefault();
            this.onChange(event);
        };
        AngularFileUploaderComponent.prototype.allowDrop = function (event) {
            event.stopPropagation();
            event.preventDefault();
            event.dataTransfer.dropEffect = 'copy';
        };
        AngularFileUploaderComponent.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        __decorate([
            core.Input()
        ], AngularFileUploaderComponent.prototype, "config", void 0);
        __decorate([
            core.Input()
        ], AngularFileUploaderComponent.prototype, "resetUpload", void 0);
        __decorate([
            core.Output()
        ], AngularFileUploaderComponent.prototype, "ApiResponse", void 0);
        __decorate([
            core.Output()
        ], AngularFileUploaderComponent.prototype, "everythingDone", void 0);
        AngularFileUploaderComponent = __decorate([
            core.Component({
                selector: 'angular-file-uploader',
                template: "<div class=\"container\" *ngIf=\"(theme !== 'attachPin')\" id=\"default\">\n\n  <!-- Drag n Drop theme Starts -->\n  <div *ngIf=\"theme == 'dragNDrop'\" id=\"dragNDrop\"\n    [ngClass]=\"(hideSelectBtn && hideResetBtn) ? null : 'dragNDropBtmPad'\" class=\"dragNDrop\">\n    <div style=\"position:relative;\">\n      <div id=\"div1\" class=\"div1 afu-dragndrop-box\" (drop)=\"drop($event)\" (dragover)=\"allowDrop($event)\">\n        <p class=\"afu-dragndrop-text\">{{replaceTexts?.dragNDropBox}}</p>\n      </div>\n      <!-- <span class='label label-info' id=\"upload-file-info{{id}}\">{{allowedFiles[0]?.name}}</span> -->\n    </div>\n  </div>\n  <!-- Drag n Drop theme Ends -->\n\n  <label for=\"sel{{id}}\" class=\"btn btn-primary btn-sm afu-select-btn\"\n    *ngIf=\"!hideSelectBtn\">{{replaceTexts?.selectFileBtn}}</label>\n  <input type=\"file\" id=\"sel{{id}}\" style=\"display: none\" *ngIf=\"!hideSelectBtn\" (change)=\"onChange($event)\"\n    title=\"Select file\" name=\"files[]\" [accept]=formatsAllowed [attr.multiple]=\"multiple ? '' : null\" />\n  <button class=\"btn btn-info btn-sm resetBtn afu-reset-btn\" (click)=\"resetFileUpload()\"\n    *ngIf=\"!hideResetBtn\">{{replaceTexts?.resetBtn}}</button>\n  <br *ngIf=\"!hideSelectBtn\">\n  <p class=\"constraints-info afu-constraints-info\">({{formatsAllowed}}) {{replaceTexts?.sizeLimit}}: {{(convertSize(maxSize))}}\n  </p>\n  <!--Allowed file list-->\n  <div class=\"row afu-valid-file\" *ngFor=\"let sf of allowedFiles;let i=index\">\n    <p class=\"col-xs-3 textOverflow\"><span class=\"text-primary\">{{sf.name}}</span></p>\n    <p class=\"col-xs-3 padMarg sizeC\"><strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n    <!--  <input class=\"col-xs-3 progress caption\"  type=\"text\"  placeholder=\"Caption..\"  [(ngModel)]=\"Caption[i]\"  *ngIf=\"!uploadStarted\"/> -->\n    <div class=\"progress col-xs-3 padMarg afu-progress-bar\" *ngIf=\"isAllowedFileSingle && progressBarShow && !hideProgressBar\">\n      <span class=\"progress-bar progress-bar-success\" role=\"progressbar\"\n        [ngStyle]=\"{'width':uploadPercent+'%'}\">{{uploadPercent}}%</span>\n    </div>\n    <a class=\"col-xs-1\" role=\"button\" (click)=\"removeFile(i,'sf')\" *ngIf=\"!uploadStarted\"><i class=\"fa fa-times\"></i></a>\n  </div>\n  <!--Not Allowed file list-->\n  <div class=\"row text-danger afu-invalid-file\" *ngFor=\"let na of notAllowedFiles;let j=index\">\n    <p class=\"col-xs-3 textOverflow\"><span>{{na['fileName']}}</span></p>\n    <p class=\"col-xs-3 padMarg sizeC\"><strong>({{na['fileSize']}})</strong></p>\n    <p class=\"col-xs-3 \">{{na['errorMsg']}}</p>\n    <a class=\"col-xs-1 delFileIcon\" role=\"button\" (click)=\"removeFile(j,'na')\" *ngIf=\"!uploadStarted\">&nbsp;<i\n        class=\"fa fa-times\"></i></a>\n  </div>\n\n  <p *ngIf=\"uploadMsg\" class=\"{{uploadMsgClass}} + afu-upload-status\">{{uploadMsgText}}<p>\n      <div *ngIf=\"!isAllowedFileSingle && progressBarShow && !hideProgressBar\">\n        <div class=\"progress col-xs-4 padMarg afu-progress-bar\">\n          <span class=\"progress-bar progress-bar-success\" role=\"progressbar\"\n            [ngStyle]=\"{'width':uploadPercent+'%'}\">{{uploadPercent}}%</span>\n        </div>\n        <br>\n        <br>\n      </div>\n      <button class=\"btn btn-success afu-upload-btn\" type=\"button\" (click)=\"uploadFiles()\"\n        [disabled]=!enableUploadBtn>{{replaceTexts?.uploadBtn}}</button>\n      <br>\n</div>\n\n<!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////-->\n<div *ngIf=\"theme == 'attachPin'\" id=\"attachPin\">\n  <div style=\"position:relative;padding-left:6px\">\n    <a class='btn up_btn afu-attach-pin' (click)=\"attachpinOnclick()\">\n      {{replaceTexts?.attachPinBtn}}\n      <i class=\"fa fa-paperclip\" aria-hidden=\"true\"></i>\n      <!-- <p style=\"margin-top:10px\">({{formatsAllowed}}) Size limit- {{(convertSize(maxSize))}}</p> -->\n      <input type=\"file\" id=\"sel{{id}}\" (change)=\"onChange($event)\" style=\"display: none\" title=\"Select file\"\n        name=\"files[]\" [accept]=formatsAllowed [attr.multiple]=\"multiple ? '' : null\" />\n      <br>\n    </a>\n    &nbsp;\n    <span class='label label-info' id=\"upload-file-info{{id}}\">{{allowedFiles[0]?.name}}</span>\n  </div>\n</div>\n\n",
                styles: [".constraints-info{margin-top:10px;font-style:italic}.padMarg{padding:0;margin-bottom:0}.caption{margin-right:5px}.textOverflow{white-space:nowrap;padding-right:0;overflow:hidden;text-overflow:ellipsis}.up_btn{color:#000;background-color:transparent;border:2px solid #5c5b5b;border-radius:22px}.delFileIcon{text-decoration:none;color:#ce0909}.dragNDrop .div1{display:border-box;border:2px dashed #5c5b5b;height:6rem;width:20rem}.dragNDrop .div1>p{text-align:center;font-weight:700;color:#5c5b5b;margin-top:1.4em}.dragNDropBtmPad{padding-bottom:2rem}@media screen and (max-width:620px){.caption{padding:0}}@media screen and (max-width:510px){.sizeC{width:25%}}@media screen and (max-width:260px){.caption,.sizeC{font-size:10px}}.resetBtn{margin-left:3px}"]
            })
        ], AngularFileUploaderComponent);
        return AngularFileUploaderComponent;
    }());

    var AngularFileUploaderModule = /** @class */ (function () {
        function AngularFileUploaderModule() {
        }
        AngularFileUploaderModule = __decorate([
            core.NgModule({
                imports: [
                    common.CommonModule,
                    http.HttpClientModule,
                ],
                declarations: [AngularFileUploaderComponent],
                exports: [AngularFileUploaderComponent]
            })
        ], AngularFileUploaderModule);
        return AngularFileUploaderModule;
    }());

    exports.AngularFileUploaderComponent = AngularFileUploaderComponent;
    exports.AngularFileUploaderModule = AngularFileUploaderModule;
    exports.AngularFileUploaderService = AngularFileUploaderService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-file-uploader.umd.js.map
