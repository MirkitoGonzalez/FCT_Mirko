!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/core"),require("@angular/common/http"),require("@angular/common")):"function"==typeof define&&define.amd?define("angular-file-uploader",["exports","@angular/core","@angular/common/http","@angular/common"],t):t((e=e||self)["angular-file-uploader"]={},e.ng.core,e.ng.common.http,e.ng.common)}(this,(function(e,t,n,i){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */var o=function(){return(o=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function s(e,t,n,i){var o,s=arguments.length,a=s<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,i);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(a=(s<3?o(a):s>3?o(t,n,a):o(t,n))||a);return s>3&&a&&Object.defineProperty(t,n,a),a}function a(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],i=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&i>=e.length&&(e=void 0),{value:e&&e[i++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}var l=function(){function e(){}return e.ɵprov=t.ɵɵdefineInjectable({factory:function(){return new e},token:e,providedIn:"root"}),e=s([t.Injectable({providedIn:"root"})],e)}(),r=function(){function e(e){this.http=e,this.resetUpload=!1,this.ApiResponse=new t.EventEmitter,this.everythingDone=new t.EventEmitter,this.allowedFiles=[],this.notAllowedFiles=[],this.Caption=[],this.isAllowedFileSingle=!0,this.progressBarShow=!1,this.enableUploadBtn=!1,this.uploadMsg=!1,this.afterUpload=!1,this.uploadStarted=!1,this.currentUploads=[],this.fileNameIndex=!0,this.idDate=+new Date}return e.prototype.ngOnChanges=function(e){e.config&&this.config&&(this.theme=this.config.theme||"",this.id=this.config.id||parseInt((this.idDate/1e4).toString().split(".")[1],10)+1e4*Math.floor(20*Math.random()),this.hideProgressBar=this.config.hideProgressBar||!1,this.hideResetBtn=this.config.hideResetBtn||!1,this.hideSelectBtn=this.config.hideSelectBtn||!1,this.maxSize=1024e3*(this.config.maxSize||20),this.uploadAPI=this.config.uploadAPI.url,this.method=this.config.uploadAPI.method||"POST",this.formatsAllowed=this.config.formatsAllowed||".jpg,.png,.pdf,.docx,.txt,.gif,.jpeg",this.multiple=this.config.multiple||!1,this.headers=this.config.uploadAPI.headers||{},this.params=this.config.uploadAPI.params||{},this.responseType=this.config.uploadAPI.responseType||null,this.fileNameIndex=!1!==this.config.fileNameIndex,this.replaceTexts={selectFileBtn:this.multiple?"Select Files":"Select File",resetBtn:"Reset",uploadBtn:"Upload",dragNDropBox:"Drag N Drop",attachPinBtn:this.multiple?"Attach Files...":"Attach File...",afterUploadMsg_success:"Successfully Uploaded !",afterUploadMsg_error:"Upload Failed !",sizeLimit:"Size Limit"},this.config.replaceTexts&&(this.replaceTexts=o(o({},this.replaceTexts),this.config.replaceTexts))),e.resetUpload&&!0===e.resetUpload.currentValue&&this.resetFileUpload()},e.prototype.resetFileUpload=function(){this.allowedFiles=[],this.Caption=[],this.notAllowedFiles=[],this.uploadMsg=!1,this.enableUploadBtn=!1},e.prototype.onChange=function(e){this.notAllowedFiles=[];var t,n=/(?:\.([^.]+))?$/;!this.afterUpload&&this.multiple||(this.allowedFiles=[],this.Caption=[],this.afterUpload=!1),t="drop"===e.type?e.dataTransfer.files:e.target.files||e.srcElement.files;for(var i=0;i<t.length;i++){var o=n.exec(t[i].name)[1].toLowerCase(),s=this.formatsAllowed.includes(o),a=t[i].size<=this.maxSize;s&&a?this.allowedFiles.push(t[i]):this.notAllowedFiles.push({fileName:t[i].name,fileSize:this.convertSize(t[i].size),errorMsg:s?"Invalid size":"Invalid format"})}this.allowedFiles.length>0?(this.enableUploadBtn=!0,"attachPin"===this.theme&&this.uploadFiles()):this.enableUploadBtn=!1,this.uploadMsg=!1,this.uploadStarted=!1,this.uploadPercent=0,e.target.value=null},e.prototype.uploadFiles=function(){var e,t,i,s,l=this;this.progressBarShow=!0,this.uploadStarted=!0,this.notAllowedFiles=[];var r=!1;this.isAllowedFileSingle=this.allowedFiles.length<=1;var p=new FormData;this.allowedFiles.forEach((function(e,t){p.append(l.Caption[t]||"file"+(l.fileNameIndex?t:""),l.allowedFiles[t])}));var d=new n.HttpHeaders;try{for(var c=a(Object.keys(this.headers)),h=c.next();!h.done;h=c.next()){var f=h.value;d.append(f,this.headers[f])}}catch(t){e={error:t}}finally{try{h&&!h.done&&(t=c.return)&&t.call(c)}finally{if(e)throw e.error}}var u=new n.HttpParams;try{for(var g=a(Object.keys(this.params)),m=g.next();!m.done;m=g.next()){f=m.value;u.append(f,this.params[f])}}catch(e){i={error:e}}finally{try{m&&!m.done&&(s=g.return)&&s.call(g)}finally{if(i)throw i.error}}var x={headers:d,params:u};this.responseType&&(x.responseType=this.responseType),this.http.request(this.method.toUpperCase(),this.uploadAPI,o({body:p,reportProgress:!0,observe:"events"},x)).subscribe((function(e){if(e.type===n.HttpEventType.UploadProgress){l.enableUploadBtn=!1;e.loaded,e.total;l.uploadPercent=Math.round(e.loaded/e.total*100)}else e.type===n.HttpEventType.Response&&(200===e.status||201===e.status?(l.progressBarShow=!1,l.enableUploadBtn=!1,l.uploadMsg=!0,l.afterUpload=!0,r||(l.uploadMsgText=l.replaceTexts.afterUploadMsg_success,l.uploadMsgClass="text-success lead")):(r=!0,l.handleErrors()),l.ApiResponse.emit(e))}),(function(e){r=!0,l.handleErrors(),l.ApiResponse.emit(e)}))},e.prototype.handleErrors=function(){this.progressBarShow=!1,this.enableUploadBtn=!1,this.uploadMsg=!0,this.afterUpload=!0,this.uploadMsgText=this.replaceTexts.afterUploadMsg_error,this.uploadMsgClass="text-danger lead"},e.prototype.removeFile=function(e,t){"sf"===t?(this.allowedFiles.splice(e,1),this.Caption.splice(e,1)):this.notAllowedFiles.splice(e,1),0===this.allowedFiles.length&&(this.enableUploadBtn=!1)},e.prototype.convertSize=function(e){return e<1024e3?(e/1024).toFixed(2)+" KB":(e/1024e3).toFixed(2)+" MB"},e.prototype.attachpinOnclick=function(){var e=document.getElementById("sel"+this.id);null!==e&&e.click()},e.prototype.drop=function(e){e.stopPropagation(),e.preventDefault(),this.onChange(e)},e.prototype.allowDrop=function(e){e.stopPropagation(),e.preventDefault(),e.dataTransfer.dropEffect="copy"},e.ctorParameters=function(){return[{type:n.HttpClient}]},s([t.Input()],e.prototype,"config",void 0),s([t.Input()],e.prototype,"resetUpload",void 0),s([t.Output()],e.prototype,"ApiResponse",void 0),s([t.Output()],e.prototype,"everythingDone",void 0),e=s([t.Component({selector:"angular-file-uploader",template:'<div class="container" *ngIf="(theme !== \'attachPin\')" id="default">\n\n  \x3c!-- Drag n Drop theme Starts --\x3e\n  <div *ngIf="theme == \'dragNDrop\'" id="dragNDrop"\n    [ngClass]="(hideSelectBtn && hideResetBtn) ? null : \'dragNDropBtmPad\'" class="dragNDrop">\n    <div style="position:relative;">\n      <div id="div1" class="div1 afu-dragndrop-box" (drop)="drop($event)" (dragover)="allowDrop($event)">\n        <p class="afu-dragndrop-text">{{replaceTexts?.dragNDropBox}}</p>\n      </div>\n      \x3c!-- <span class=\'label label-info\' id="upload-file-info{{id}}">{{allowedFiles[0]?.name}}</span> --\x3e\n    </div>\n  </div>\n  \x3c!-- Drag n Drop theme Ends --\x3e\n\n  <label for="sel{{id}}" class="btn btn-primary btn-sm afu-select-btn"\n    *ngIf="!hideSelectBtn">{{replaceTexts?.selectFileBtn}}</label>\n  <input type="file" id="sel{{id}}" style="display: none" *ngIf="!hideSelectBtn" (change)="onChange($event)"\n    title="Select file" name="files[]" [accept]=formatsAllowed [attr.multiple]="multiple ? \'\' : null" />\n  <button class="btn btn-info btn-sm resetBtn afu-reset-btn" (click)="resetFileUpload()"\n    *ngIf="!hideResetBtn">{{replaceTexts?.resetBtn}}</button>\n  <br *ngIf="!hideSelectBtn">\n  <p class="constraints-info afu-constraints-info">({{formatsAllowed}}) {{replaceTexts?.sizeLimit}}: {{(convertSize(maxSize))}}\n  </p>\n  \x3c!--Allowed file list--\x3e\n  <div class="row afu-valid-file" *ngFor="let sf of allowedFiles;let i=index">\n    <p class="col-xs-3 textOverflow"><span class="text-primary">{{sf.name}}</span></p>\n    <p class="col-xs-3 padMarg sizeC"><strong>({{convertSize(sf.size)}})</strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n    \x3c!--  <input class="col-xs-3 progress caption"  type="text"  placeholder="Caption.."  [(ngModel)]="Caption[i]"  *ngIf="!uploadStarted"/> --\x3e\n    <div class="progress col-xs-3 padMarg afu-progress-bar" *ngIf="isAllowedFileSingle && progressBarShow && !hideProgressBar">\n      <span class="progress-bar progress-bar-success" role="progressbar"\n        [ngStyle]="{\'width\':uploadPercent+\'%\'}">{{uploadPercent}}%</span>\n    </div>\n    <a class="col-xs-1" role="button" (click)="removeFile(i,\'sf\')" *ngIf="!uploadStarted"><i class="fa fa-times"></i></a>\n  </div>\n  \x3c!--Not Allowed file list--\x3e\n  <div class="row text-danger afu-invalid-file" *ngFor="let na of notAllowedFiles;let j=index">\n    <p class="col-xs-3 textOverflow"><span>{{na[\'fileName\']}}</span></p>\n    <p class="col-xs-3 padMarg sizeC"><strong>({{na[\'fileSize\']}})</strong></p>\n    <p class="col-xs-3 ">{{na[\'errorMsg\']}}</p>\n    <a class="col-xs-1 delFileIcon" role="button" (click)="removeFile(j,\'na\')" *ngIf="!uploadStarted">&nbsp;<i\n        class="fa fa-times"></i></a>\n  </div>\n\n  <p *ngIf="uploadMsg" class="{{uploadMsgClass}} + afu-upload-status">{{uploadMsgText}}<p>\n      <div *ngIf="!isAllowedFileSingle && progressBarShow && !hideProgressBar">\n        <div class="progress col-xs-4 padMarg afu-progress-bar">\n          <span class="progress-bar progress-bar-success" role="progressbar"\n            [ngStyle]="{\'width\':uploadPercent+\'%\'}">{{uploadPercent}}%</span>\n        </div>\n        <br>\n        <br>\n      </div>\n      <button class="btn btn-success afu-upload-btn" type="button" (click)="uploadFiles()"\n        [disabled]=!enableUploadBtn>{{replaceTexts?.uploadBtn}}</button>\n      <br>\n</div>\n\n\x3c!--/////////////////////////// ATTACH PIN THEME  //////////////////////////////////////////////////////////--\x3e\n<div *ngIf="theme == \'attachPin\'" id="attachPin">\n  <div style="position:relative;padding-left:6px">\n    <a class=\'btn up_btn afu-attach-pin\' (click)="attachpinOnclick()">\n      {{replaceTexts?.attachPinBtn}}\n      <i class="fa fa-paperclip" aria-hidden="true"></i>\n      \x3c!-- <p style="margin-top:10px">({{formatsAllowed}}) Size limit- {{(convertSize(maxSize))}}</p> --\x3e\n      <input type="file" id="sel{{id}}" (change)="onChange($event)" style="display: none" title="Select file"\n        name="files[]" [accept]=formatsAllowed [attr.multiple]="multiple ? \'\' : null" />\n      <br>\n    </a>\n    &nbsp;\n    <span class=\'label label-info\' id="upload-file-info{{id}}">{{allowedFiles[0]?.name}}</span>\n  </div>\n</div>\n\n',styles:[".constraints-info{margin-top:10px;font-style:italic}.padMarg{padding:0;margin-bottom:0}.caption{margin-right:5px}.textOverflow{white-space:nowrap;padding-right:0;overflow:hidden;text-overflow:ellipsis}.up_btn{color:#000;background-color:transparent;border:2px solid #5c5b5b;border-radius:22px}.delFileIcon{text-decoration:none;color:#ce0909}.dragNDrop .div1{display:border-box;border:2px dashed #5c5b5b;height:6rem;width:20rem}.dragNDrop .div1>p{text-align:center;font-weight:700;color:#5c5b5b;margin-top:1.4em}.dragNDropBtmPad{padding-bottom:2rem}@media screen and (max-width:620px){.caption{padding:0}}@media screen and (max-width:510px){.sizeC{width:25%}}@media screen and (max-width:260px){.caption,.sizeC{font-size:10px}}.resetBtn{margin-left:3px}"]})],e)}(),p=function(){function e(){}return e=s([t.NgModule({imports:[i.CommonModule,n.HttpClientModule],declarations:[r],exports:[r]})],e)}();e.AngularFileUploaderComponent=r,e.AngularFileUploaderModule=p,e.AngularFileUploaderService=l,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=angular-file-uploader.umd.min.js.map