import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { ReplaceTexts, AngularFileUploaderConfig, UploadInfo } from './angular-file-uploader.types';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import * as ɵngcc0 from '@angular/core';
export declare class AngularFileUploaderComponent implements OnChanges {
    private http;
    config: AngularFileUploaderConfig;
    resetUpload: boolean;
    ApiResponse: EventEmitter<any>;
    everythingDone: EventEmitter<UploadInfo[]>;
    theme: string;
    id: number;
    hideProgressBar: boolean;
    maxSize: number;
    uploadAPI: string;
    method: string;
    formatsAllowed: string;
    multiple: boolean;
    headers: HttpHeaders | {
        [header: string]: string | string[];
    };
    params: HttpParams | {
        [param: string]: string | string[];
    };
    responseType: string;
    hideResetBtn: boolean;
    hideSelectBtn: boolean;
    allowedFiles: File[];
    notAllowedFiles: {
        fileName: string;
        fileSize: string;
        errorMsg: string;
    }[];
    Caption: string[];
    isAllowedFileSingle: boolean;
    progressBarShow: boolean;
    enableUploadBtn: boolean;
    uploadMsg: boolean;
    afterUpload: boolean;
    uploadStarted: boolean;
    uploadMsgText: string;
    uploadMsgClass: string;
    uploadPercent: number;
    replaceTexts: ReplaceTexts;
    currentUploads: any[];
    fileNameIndex: boolean;
    private idDate;
    constructor(http: HttpClient);
    ngOnChanges(changes: SimpleChanges): void;
    resetFileUpload(): void;
    onChange(event: any): void;
    uploadFiles(): void;
    handleErrors(): void;
    removeFile(i: any, sf_na: any): void;
    convertSize(fileSize: number): string;
    attachpinOnclick(): void;
    drop(event: any): void;
    allowDrop(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularFileUploaderComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AngularFileUploaderComponent, "angular-file-uploader", never, { "resetUpload": "resetUpload"; "config": "config"; }, { "ApiResponse": "ApiResponse"; "everythingDone": "everythingDone"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1maWxlLXVwbG9hZGVyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhbmd1bGFyLWZpbGUtdXBsb2FkZXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVwbGFjZVRleHRzLCBBbmd1bGFyRmlsZVVwbG9hZGVyQ29uZmlnLCBVcGxvYWRJbmZvIH0gZnJvbSAnLi9hbmd1bGFyLWZpbGUtdXBsb2FkZXIudHlwZXMnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMsIEh0dHBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBbmd1bGFyRmlsZVVwbG9hZGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgICBwcml2YXRlIGh0dHA7XG4gICAgY29uZmlnOiBBbmd1bGFyRmlsZVVwbG9hZGVyQ29uZmlnO1xuICAgIHJlc2V0VXBsb2FkOiBib29sZWFuO1xuICAgIEFwaVJlc3BvbnNlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBldmVyeXRoaW5nRG9uZTogRXZlbnRFbWl0dGVyPFVwbG9hZEluZm9bXT47XG4gICAgdGhlbWU6IHN0cmluZztcbiAgICBpZDogbnVtYmVyO1xuICAgIGhpZGVQcm9ncmVzc0JhcjogYm9vbGVhbjtcbiAgICBtYXhTaXplOiBudW1iZXI7XG4gICAgdXBsb2FkQVBJOiBzdHJpbmc7XG4gICAgbWV0aG9kOiBzdHJpbmc7XG4gICAgZm9ybWF0c0FsbG93ZWQ6IHN0cmluZztcbiAgICBtdWx0aXBsZTogYm9vbGVhbjtcbiAgICBoZWFkZXJzOiBIdHRwSGVhZGVycyB8IHtcbiAgICAgICAgW2hlYWRlcjogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgfTtcbiAgICBwYXJhbXM6IEh0dHBQYXJhbXMgfCB7XG4gICAgICAgIFtwYXJhbTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgfTtcbiAgICByZXNwb25zZVR5cGU6IHN0cmluZztcbiAgICBoaWRlUmVzZXRCdG46IGJvb2xlYW47XG4gICAgaGlkZVNlbGVjdEJ0bjogYm9vbGVhbjtcbiAgICBhbGxvd2VkRmlsZXM6IEZpbGVbXTtcbiAgICBub3RBbGxvd2VkRmlsZXM6IHtcbiAgICAgICAgZmlsZU5hbWU6IHN0cmluZztcbiAgICAgICAgZmlsZVNpemU6IHN0cmluZztcbiAgICAgICAgZXJyb3JNc2c6IHN0cmluZztcbiAgICB9W107XG4gICAgQ2FwdGlvbjogc3RyaW5nW107XG4gICAgaXNBbGxvd2VkRmlsZVNpbmdsZTogYm9vbGVhbjtcbiAgICBwcm9ncmVzc0JhclNob3c6IGJvb2xlYW47XG4gICAgZW5hYmxlVXBsb2FkQnRuOiBib29sZWFuO1xuICAgIHVwbG9hZE1zZzogYm9vbGVhbjtcbiAgICBhZnRlclVwbG9hZDogYm9vbGVhbjtcbiAgICB1cGxvYWRTdGFydGVkOiBib29sZWFuO1xuICAgIHVwbG9hZE1zZ1RleHQ6IHN0cmluZztcbiAgICB1cGxvYWRNc2dDbGFzczogc3RyaW5nO1xuICAgIHVwbG9hZFBlcmNlbnQ6IG51bWJlcjtcbiAgICByZXBsYWNlVGV4dHM6IFJlcGxhY2VUZXh0cztcbiAgICBjdXJyZW50VXBsb2FkczogYW55W107XG4gICAgZmlsZU5hbWVJbmRleDogYm9vbGVhbjtcbiAgICBwcml2YXRlIGlkRGF0ZTtcbiAgICBjb25zdHJ1Y3RvcihodHRwOiBIdHRwQ2xpZW50KTtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICByZXNldEZpbGVVcGxvYWQoKTogdm9pZDtcbiAgICBvbkNoYW5nZShldmVudDogYW55KTogdm9pZDtcbiAgICB1cGxvYWRGaWxlcygpOiB2b2lkO1xuICAgIGhhbmRsZUVycm9ycygpOiB2b2lkO1xuICAgIHJlbW92ZUZpbGUoaTogYW55LCBzZl9uYTogYW55KTogdm9pZDtcbiAgICBjb252ZXJ0U2l6ZShmaWxlU2l6ZTogbnVtYmVyKTogc3RyaW5nO1xuICAgIGF0dGFjaHBpbk9uY2xpY2soKTogdm9pZDtcbiAgICBkcm9wKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGFsbG93RHJvcChldmVudDogYW55KTogdm9pZDtcbn1cbiJdfQ==